import { shallowMount } from "@vue/test-utils";
import { nextTick } from "vue";
import axios from "axios";
import Exploitants from "../src/views/Exploitants";
import store from "../src/store/index";
import { initMockAxios } from "./tools";
import { jest } from "@jest/globals";

jest.mock("axios");

describe("Exploitants", () => {
  it("test on the get", async () => {
    initMockAxios();
    const wrapper = shallowMount(Exploitants, { store });
    await nextTick();
    expect(axios.get).toHaveBeenCalledTimes(3);
    expect(axios.get).toHaveBeenNthCalledWith(1, "/exploitant/");
    expect(axios.get).toHaveBeenNthCalledWith(2, "/exploitant/nombre/");
    expect(axios.get).toHaveBeenNthCalledWith(3, "/exploitant/role/");
    await nextTick();
    expect(wrapper.find(".page > .titre").text()).toBe(
      "Exploitants ou Editeur"
    );
    expect(wrapper.find(".nbre").text()).toBe(
      "Vous avez 5 exploitants/éditeurs."
    );
    const headers = wrapper.find(".tab > v-data-table-stub").props("headers");
    const exploitants = wrapper.find(".tab > v-data-table-stub").props("items");
    expect(headers.length).toStrictEqual(5);
    expect(headers[0].text).toStrictEqual("Libellé long");
    expect(headers[1].text).toStrictEqual("Libellé court");
    expect(headers[2].text).toStrictEqual("Rôle");
    expect(headers[3].text).toStrictEqual("Etat");
    expect(headers[4].text).toStrictEqual("Modifier");

    expect(exploitants.length).toStrictEqual(5);
    expect(exploitants[0].lib_exploitant_court).toStrictEqual("Exp 1");
    expect(exploitants[1].lib_exploitant_long).toStrictEqual("Exploitant 2");
    expect(exploitants[2].libelle_role).toStrictEqual("exploitant");
    expect(exploitants[3].lib_exploitant_court).toStrictEqual("Exp 4");
    expect(exploitants[4].etat).toStrictEqual(1);
  });

  it("test on the adding (post)", async () => {
    initMockAxios();
    const wrapper = shallowMount(Exploitants, { store });
    await nextTick();
    expect(axios.get).toHaveBeenCalledTimes(3);
    expect(axios.put).toHaveBeenCalledTimes(0);
    expect(axios.post).toHaveBeenCalledTimes(0);
    await nextTick();
    wrapper.vm.openDialogEdit({}); // with "vm" we can access to the function openDialogEdit() inside the component
    await nextTick();
    // console.log(wrapper.html())

    // We check the labels and values in the openDialogEdit card
    const dialog = wrapper.find(".tab > v-dialog-stub");
    const comp1 = dialog.find("v-text-field-stub:nth-child(1)");
    expect(comp1.props().label).toBe("Libellé long");
    expect(comp1.props().value).toBe(undefined);
    const comp2 = dialog.find("v-text-field-stub:nth-child(2)");
    expect(comp2.props().label).toBe("Libellé court");
    expect(comp2.props().value).toBe(undefined);

    // We test only the post in the edit_exploitant() method
    await wrapper.vm.edit_exploitant(); // we wait the method edit_exploitant() is finished before do actions below
    expect(axios.get).toHaveBeenCalledTimes(4);
    expect(axios.put).toHaveBeenCalledTimes(0);
    expect(axios.post).toHaveBeenCalledTimes(1);
    // expect(axios.post).toHaveBeenNthCalledWith(2, "/exploitant/", {
    //   etat: "1",
    //   lib_exploitant_long: "exp 7",
    //   lib_exploitant_court: "",
    //   role: "",
    // });
    // // We check the success message
    // const success = wrapper.find(".tab > v-alert-stub:nth-child(1)");
    // expect(success.text()).toBe("L'exploitant/éditeur a bien été ajouté.");
  });

  it("test on the modification (put)", async () => {
    initMockAxios();
    const wrapper = shallowMount(Exploitants, { store });
    await nextTick();
    expect(axios.get).toHaveBeenCalledTimes(3);
    expect(axios.put).toHaveBeenCalledTimes(0);
    expect(axios.post).toHaveBeenCalledTimes(0);
    await nextTick();

    // We check the labels and values in the openDialogEdit card
    wrapper.vm.openDialogEdit({
      etat: "1",
      id_exploitant: 3,
      lib_exploitant_court: "Exp 3",
      lib_exploitant_long: "Exploitant 3",
      role: "editeur",
    });
    await nextTick();
    // console.log(wrapper.html())
    const dialog = wrapper.find(".tab > v-dialog-stub");
    const comp1 = dialog.find("v-text-field-stub:nth-child(1)");
    expect(comp1.props().label).toBe("Libellé long");
    expect(comp1.props().value).toBe("Exploitant 3");
    const comp2 = dialog.find("v-text-field-stub:nth-child(2)");
    expect(comp2.props().label).toBe("Libellé court");
    expect(comp2.props().value).toBe("Exp 3");

    // We test only the put in the edit_exploitant() method
    await wrapper.vm.edit_exploitant();
    expect(axios.get).toHaveBeenCalledTimes(4);
    expect(axios.put).toHaveBeenCalledTimes(1);
    expect(axios.post).toHaveBeenCalledTimes(0);
    expect(axios.get).toHaveBeenNthCalledWith(3, "/exploitant/role/");
    expect(axios.put).toHaveBeenNthCalledWith(1, "/exploitant/3", {
      id_exploitant: 3,
      lib_exploitant_court: "Exp 3",
      lib_exploitant_long: "Exploitant 3",
      role: "editeur",
      etat: "1",
    });
    // We check the success message
    // const success = wrapper.find(".tab > v-alert-stub:nth-child(1)");
    // // expect(success.text()).toBe(
    // //   "L'exploitant/éditeur Exploitant 3 a bien été modifié."
    // // );
  });
});
